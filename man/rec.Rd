% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rec.R
\name{rec}
\alias{rec}
\alias{rec<-}
\title{Recode variables}
\usage{
rec(x, recodes, as.fac = FALSE, var.label = NULL, val.labels = NULL,
  suffix = "_r")

rec(x, as.fac = FALSE, var.label = NULL, val.labels = NULL,
  suffix = "_r") <- value
}
\arguments{
\item{x}{A variable, data frame or list-object.}

\item{recodes}{String with recode pairs of old and new values. See
'Details' for examples. \code{\link{rec_pattern}} is a convenient
function to create recode strings for grouping variables.}

\item{as.fac}{Logical, if \code{TRUE}, recoded variable is returned as factor.
Default is \code{FALSE}, thus a numeric variable is returned.}

\item{var.label}{Optional string, to set variable label attribute for the
returned variable (see \code{\link{set_label}}). If \code{NULL}
(default), variable label attribute of \code{x} will be used (if present).
If empty, variable label attributes will be removed.}

\item{val.labels}{Optional character vector, to set value label attributes
of recoded variable (see \code{\link{set_labels}}).
If \code{NULL} (default), no value labels will be set. Value labels
can also be directly defined in the \code{recodes}-syntax, see
'Details'.}

\item{suffix}{String value, will be appended to variable (column) names of
\code{x}, if \code{x} is a data frame. If \code{x} is not a data
frame, this argument will be ignored. The default value to suffix
column names in a data frame depends on the function call:
\itemize{
  \item recoded variables (\code{rec()}) will be suffixed with \code{"_r"}
  \item dichotomized variables (\code{dicho()}) will be suffixed with \code{"_d"}
  \item grouped variables (\code{split_var()}) will be suffixed with \code{"_g"}
}}

\item{value}{See \code{recodes}.}
}
\value{
A numeric variable (or a factor, if \code{as.fac = TRUE} or if \code{x}
          was a character vector) with recoded category values, or a data
          frame or \code{list}-object with recoded categories for all variables.
}
\description{
Recodes the categories / values of a variable \code{x} into new
               category values.
}
\details{
The \code{recodes} string has following syntax:
          \describe{
           \item{recode pairs}{each recode pair has to be separated by a \code{;}, e.g. \code{recodes = "1=1; 2=4; 3=2; 4=3"}}
           \item{multiple values}{multiple old values that should be recoded into a new single value may be separated with comma, e.g. \code{"1,2=1; 3,4=2"}}
           \item{value range}{a value range is indicated by a colon, e.g. \code{"1:4=1; 5:8=2"} (recodes all values from 1 to 4 into 1, and from 5 to 8 into 2)}
           \item{\code{"min"} and \code{"max"}}{minimum and maximum values are indicates by \emph{min} (or \emph{lo}) and \emph{max} (or \emph{hi}), e.g. \code{"min:4=1; 5:max=2"} (recodes all values from minimum values of \code{x} to 4 into 1, and from 5 to maximum values of \code{x} into 2)}
           \item{\code{"else"}}{all other values, which have not been specified yet, are indicated by \emph{else}, e.g. \code{"3=1; 1=2; else=3"} (recodes 3 into 1, 1 into 2 and all other values into 3)}
           \item{\code{"copy"}}{the \code{"else"}-token can be combined with \emph{copy}, indicating that all remaining, not yet recoded values should stay the same (are copied from the original value), e.g. \code{"3=1; 1=2; else=copy"} (recodes 3 into 1, 1 into 2 and all other values like 2, 4 or 5 etc. will not be recoded, but copied, see 'Examples')}
           \item{\code{NA}'s}{\code{\link{NA}} values are allowed both as old and new value, e.g. \code{"NA=1; 3:5=NA"} (recodes all NA into 1, and all values from 3 to 5 into NA in the new variable)}
           \item{\code{"rev"}}{\code{"rev"} is a special token that reverses the value order (see 'Examples')}
           \item{direct value labelling}{value labels for new values can be assigned inside the recode pattern by writing the value label in square brackets after defining the new value in a recode pair, e.g. \code{"15:30=1 [young aged]; 31:55=2 [middle aged]; 56:max=3 [old aged]"}. See 'Examples'.}
          }
}
\note{
Please note following behaviours of the function:
      \itemize{
        \item the \code{"else"}-token should always be the last argument in the \code{recodes}-string.
        \item Non-matching values will be set to \code{NA}, unless captured by the \code{"else"}-token.
        \item Tagged NA values (see \code{\link[haven]{tagged_na}}) and their value labels will be preserved when copying NA values to the recoded vector with \code{"else=copy"}.
        \item Variable label attributes (see, for instance, \code{\link{get_label}}) are preserved (unless changed via \code{var.label}-argument), however, value label attributes are removed (except for \code{"rev"}, where present value labels will be automatically reversed as well). Use \code{val.labels}-argument to add labels for recoded values.
        \item If \code{x} is a data frame or list-object, all variables should have the same categories resp. value range (else, see second bullet, \code{NA}s are produced).
      }
}
\examples{
data(efc)
table(efc$e42dep, useNA = "always")

# replace NA with 5
table(rec(efc$e42dep, recodes = "1=1;2=2;3=3;4=4;NA=5"), useNA = "always")

# recode 1 to 2 into 1 and 3 to 4 into 2
table(rec(efc$e42dep, recodes = "1,2=1; 3,4=2"), useNA = "always")

# or:
# rec(efc$e42dep) <- "1,2=1; 3,4=2"
# table(efc$e42dep, useNA = "always")

# keep value labels. variable label is automatically preserved
library(dplyr)
efc \%>\%
  select(e42dep) \%>\%
  rec(recodes = "1,2=1; 3,4=2",
      val.labels = c("low dependency", "high dependency")) \%>\%
  str()

# recode 1 to 3 into 4 into 2
table(rec(efc$e42dep, recodes = "min:3=1; 4=2"), useNA = "always")

# recode 2 to 1 and all others into 2
table(rec(efc$e42dep, recodes = "2=1; else=2"), useNA = "always")

# reverse value order
table(rec(efc$e42dep, recodes = "rev"), useNA = "always")

# recode only selected values, copy remaining
table(efc$e15relat)
table(rec(efc$e15relat, recodes = "1,2,4=1; else=copy"))

# recode variables with same category in a data frame
head(efc[, 6:9])
head(rec(efc[, 6:9], recodes = "1=10;2=20;3=30;4=40"))

# recode variable and set value labels via recode-syntax
dummy <- rec(efc$c160age,
             recodes = "15:30=1 [young]; 31:55=2 [middle]; 56:max=3 [old]")
frq(dummy)

# recode list of variables. create dummy-list of
# variables with same value-range
dummy <- list(efc$c82cop1, efc$c83cop2, efc$c84cop3)
# show original distribution
lapply(dummy, table, useNA = "always")
# show recodes
lapply(rec(dummy, recodes = "1,2=1; NA=9; else=copy"), table, useNA = "always")

# recode character vector
dummy <- c("M", "F", "F", "X")
rec(dummy, recodes = "M=Male; F=Female; X=Refused")

# recode non-numeric factors
data(iris)
rec(iris$Species, "setosa=huhu; else=copy")

# preserve tagged NAs
library(haven)
x <- labelled(c(1:3, tagged_na("a", "c", "z"), 4:1),
              c("Agreement" = 1, "Disagreement" = 4, "First" = tagged_na("c"),
                "Refused" = tagged_na("a"), "Not home" = tagged_na("z")))
# get current value labels
x
# recode 2 into 5; Values of tagged NAs are preserved
rec(x, recodes = "2=5;else=copy")
na_tag(rec(x, recodes = "2=5;else=copy"))

}
\seealso{
\code{\link{set_na}} for setting \code{NA} values, \code{\link{replace_na}}
           to replace \code{NA}'s with specific value, \code{\link{recode_to}}
           for re-shifting value ranges and \code{\link{ref_lvl}} to change the
           reference level of (numeric) factors.
}

