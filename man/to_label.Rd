% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_label.R
\name{to_label}
\alias{to_label}
\title{Convert variable into factor and replace values with associated value labels}
\usage{
to_label(x, ..., add.non.labelled = FALSE, prefix = FALSE,
  var.label = NULL, drop.na = TRUE, drop.levels = FALSE)
}
\arguments{
\item{x}{A labelled vector (see \code{\link{set_labels}} or
\code{\link[haven]{labelled}}), respectively a data frame with
such variables.}

\item{...}{Optional, unquoted names of variables. Required, if either
\code{x} is a data frame and no vector, or if only selected variables
from \code{x} should be used in the function. See 'Examples'.}

\item{add.non.labelled}{logical, if \code{TRUE}, values without associated
value label will also be converted to labels (as is). See 'Examples'.}

\item{prefix}{Logical, if \code{TRUE}, the value labels used as factor levels
or character values will be prefixed with their associated values. See 'Examples'.}

\item{var.label}{Optional string, to set variable label attribute for the
returned variable (see \code{\link{set_label}}). If \code{NULL}
(default), variable label attribute of \code{x} will be used (if present).
If empty, variable label attributes will be removed.}

\item{drop.na}{Logical, if \code{TRUE}, tagged \code{NA} values with value labels
will be converted to regular NA's. Else, tagged \code{NA} values will be replaced
with their value labels. See 'Examples' and \code{\link{get_na}}.}

\item{drop.levels}{Logical, if \code{TRUE}, unused factor levels will be
dropped (i.e. \code{\link{droplevels}} will be applied before returning
the result).}
}
\value{
A factor variable with the associated value labels as factor levels, or a
          data frame with such factor variables (if \code{x} was a data frame).
}
\description{
This function converts (replaces) variable values (also of factors
               or character vectors) with their associated value labels. Might
               be helpful for factor variables.
               For instance, if you have a Gender variable with 0/1 value, and associated
               labels are male/female, this function would convert all 0 to male and
               all 1 to female and returns the new variable as \code{\link{factor}}.
}
\details{
See 'Details' in \code{\link{get_na}}.
}
\note{
Value label attributes (see, for instance, \code{\link{get_labels}})
      will be removed when converting variables to factors.
}
\examples{
data(efc)
print(get_labels(efc)['c161sex'])
head(efc$c161sex)
head(to_label(efc$c161sex))

print(get_labels(efc)['e42dep'])
table(efc$e42dep)
table(to_label(efc$e42dep))

head(efc$e42dep)
head(to_label(efc$e42dep))

# structure of numeric values won't be changed
# by this function, it only applies to labelled vectors
# (typically categorical or factor variables)
str(efc$e17age)
str(to_label(efc$e17age))


# factor with non-numeric levels
to_label(factor(c("a", "b", "c")))

# factor with non-numeric levels, prefixed
x <- factor(c("a", "b", "c"))
set_labels(x) <- c("ape", "bear", "cat")
to_label(x, prefix = TRUE)


# create vector
x <- c(1, 2, 3, 2, 4, NA)
# add less labels than values
x <- set_labels(x, c("yes", "maybe", "no"),
                force.labels = FALSE,
                force.values = FALSE)
# convert to label w/o non-labelled values
to_label(x)
# convert to label, including non-labelled values
to_label(x, add.non.labelled = TRUE)


# create labelled integer, with missing flag
library(haven)
x <- labelled(c(1:3, tagged_na("a", "c", "z"), 4:1, 2:3),
              c("Agreement" = 1, "Disagreement" = 4, "First" = tagged_na("c"),
                "Refused" = tagged_na("a"), "Not home" = tagged_na("z")))
# to labelled factor, with missing labels
to_label(x, drop.na = FALSE)
# to labelled factor, missings removed
to_label(x, drop.na = TRUE)
# keep missings, and use non-labelled values as well
to_label(x, add.non.labelled = TRUE, drop.na = FALSE)


# convert labelled character to factor
dummy <- c("M", "F", "F", "X")
set_labels(dummy) <- c(`M` = "Male", `F` = "Female", `X` = "Refused")
get_labels(dummy,, "p")
to_label(dummy)

# drop unused factor levels, but preserve variable label
x <- factor(c("a", "b", "c"), levels = c("a", "b", "c", "d"))
set_labels(x) <- c("ape", "bear", "cat")
set_label(x) <- "A factor!"
x
to_label(x, drop.levels = TRUE)

# change variable label
to_label(x, var.label = "New variable label!", drop.levels = TRUE)


# easily coerce specific variables in a data frame to factor
# and keep other variables, with their class preserved
to_label(efc, e42dep, e16sex, c172code)

}
\seealso{
\code{\link{to_factor}} to convert a numeric variable into a factor (and
           preserve labels); \code{\link{to_value}} to convert a factor into
           a numeric variable and \code{\link{to_character}} to convert a
           labelled vector into a character vector (using label attributes as
           values).
}

